# Copyright 2021 Thomas Battenfeld, Alexander Thomas, Johannes KÃ¶ster.
# Licensed under the BSD 2-Clause License (https://opensource.org/licenses/BSD-2-Clause)
# This file may not be copied, modified, or distributed
# except according to those terms.

from snakemake.utils import min_version


min_version("6.3.0")


configfile: "config/config.yaml"


pepfile: config["pepfile"]


report: "report/workflow.rst"


container: "docker://condaforge/mambaforge"


containerized: "quay.io/uncovar/uncovar#0.3.0"


if config["strain-calling"]["use-gisaid"]:

    envvars:
        "GISAID_API_TOKEN",


include: "rules/common.smk"
include: "rules/utils.smk"
include: "rules/ref.smk"
include: "rules/qc.smk"
include: "rules/read_trimming.smk"
include: "rules/read_clipping.smk"
include: "rules/read_mapping.smk"
include: "rules/assembly.smk"
include: "rules/pseudoassembly.smk"
include: "rules/strain_calling.smk"
include: "rules/variant_calling.smk"
include: "rules/variant_annotation.smk"
include: "rules/variant_filtration.smk"
include: "rules/variant_report.smk"
include: "rules/generate_output.smk"
include: "rules/benchmarking.smk"
include: "rules/preprocessing.smk"
include: "rules/long_read.smk"


rule save_latest_run:
    input:
        expand(
            "results/.indicators/{latest_run}.archived",
            latest_run=get_latest_run_date(),
        ),
    output:
        expand(
            "".join(
                (
                    config["data-handling"]["archive"],
                    "{latest_run}/results_{latest_run}.tar.gz",
                )
            ),
            latest_run=get_latest_run_date(),
        ),
    params:
        latest_run=get_latest_run_date(),
    log:
        expand("logs/save-run/{latest_run}.log", latest_run=get_latest_run_date()),
    conda:
        "envs/unix.yaml"
    shell:
        "tar -zcvf {output} results/{params.latest_run} 2> {log} 2>&1"


checkpoint all:
    input:
        expand(
            [
                "results/{date}/qc/multiqc.html",
                "results/reports/{date}.zip"
                "results/{date}/tables/assembly_comparison.tsv",
            ],
            date=get_all_run_dates(),
        ),
        expand(
            "results/{date}/plots/all.{mode}-strain.strains.kallisto.svg",
            date=get_all_run_dates(),
            mode=["major", "any"],
        ),
        zip_expand(
            "results/{zip1}/filtered-calls/ref~main/{zip2}.subclonal.{{exp}}.bcf",
            zip_wildcard_1=get_dates(),
            zip_wildcard_2=get_samples(),
            expand_wildcard=config["variant-calling"]["filters"],
        ),
    output:
        touch(
            expand(
                "results/.indicators/{latest_run}.archived",
                latest_run=get_latest_run_date(),
            )
        ),


rule compare_assemblers:
    input:
        "results/benchmarking/plots/assembler-comparison.svg",


rule benchmark_strain_calling:
    input:
        "results/benchmarking/strain-calling.csv",


rule benchmark_assembly:
    input:
        expand(
            "results/benchmarking/assembly/{assembly_type}.csv",
            assembly_type=["assembly", "pseudoassembly"],
        ),


rule benchmark_non_sars_cov_2:
    input:
        "results/benchmarking/non-sars-cov-2.csv",


rule benchmark_mixtures:
    input:
        expand(
            "results/benchmarking/plots/{caller}-strain-call-error-heatmap.svg",
            caller=["kallisto", "pangolin"],
        ),
        "results/benchmarking/plots/pangolin-call-dependency.svg",
        "results/benchmarking/tables/pangolin_statistics.csv"
        if config["mixtures"]["no_strains"] == 1
        else [],


rule benchmark_reads:
    input:
        "results/benchmarking/plots/aggregated_read_calls.svg",
